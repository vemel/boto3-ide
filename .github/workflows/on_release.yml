name: Release new version
'on':
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag
        required: true
jobs:
  release-new-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release
        uses: actions/github-script@v7
        id: release
        with:
          script: |
            let release = null;
            if (context.payload.inputs && context.payload.inputs.tag) {
              const tagName = context.payload.inputs.tag;
              // find Pull Request by number fom input
              const releasesResponse = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              for (let releaseItem of releasesResponse.data) {
                if (releaseItem.tag_name !== tagName) continue;
                release = releaseItem;
                core.info(`Found release ${release.name}`);
                break;
              }
            }
            if (context.payload.release){
              // get Release from event payload
              release = context.payload.release;
            }

            if (!release) {
              throw new Error(`Cannot find Release`);
            }

            core.setOutput('target', release.target_commitish);
            core.setOutput('branch', `release/${release.tag_name}`);
            core.setOutput('id', release.id);
            core.setOutput("url", release.html_url);
            core.setOutput('tag', release.tag_name);
            core.setOutput('name', release.name);
            core.setOutput('body', release.body);
            return true;
      - name: Set up Node
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Checkout Release target branch
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.release.outputs.target }}
      - name: Get new version
        id: version
        uses: vemel/nextversion@0.1.1
        with:
          path: ./package.json
          type: semver
          result: ${{ steps.release.outputs.tag }}
      - name: Set version
        id: set-version
        run: |
          npm config set git-tag-version false
          npm version ${{ steps.version.outputs.result }} --allow-same-version
      - name: Add new release to CHANGELOG.md
        id: changelog
        uses: vemel/nextchange@0.1.0
        with:
          release: ${{ steps.release.outputs.tag }}
          clear: true
          set: ${{ steps.release.outputs.body }}
      - name: Clear Unreleased in CHANGELOG.md
        id: clear-unreleased
        if: ${{ steps.version.outputs.is-prerelease == 'false' }}
        uses: vemel/nextchange@0.1.0
        with:
          release: Unreleased
          clear: true
      - name: Commit changes
        id: commit
        env:
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          git config --global user.email "github-actions"
          git config --global user.name "github-actions@github.com"
          git commit -am "Bump version to ${VERSION}"
          git push
      - name: Install package
        id: install
        run: |
          npm install -g npm
          npm ci
      - name: Publish to Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          npx vsce publish
